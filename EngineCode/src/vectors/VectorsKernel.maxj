/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 6
 * Example: 3
 * Summary:
 *        Kernel that doubles values in a vector.
 */
package vectors;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class VectorsKernel extends Kernel {

	VectorsKernel(KernelParameters parameters, int vectorSize) {
		super(parameters);


		DFEVectorType<DFEVar> vectorType =
			new DFEVectorType<DFEVar>(dfeUInt(32), vectorSize);

		// Input
		DFEVector<DFEVar> col = io.input("col", vectorType);
		DFEVector<DFEVar> row = io.input("row", vectorType);

        // Creating a new vector to hold the products of other vectors being multiplied against each other
        DFEVector<DFEVar> cVal = vectorType.newInstance(this);

        // Multiply 
		for (int i = 0; i < vectorSize; i++)
			cVal[i] <== col[i] * row[i];


// 		//Output
		io.output("cVal", cVal, vectorType);
		
	}

}
